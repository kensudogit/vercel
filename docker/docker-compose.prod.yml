version: '3.8'

services:
  # PostgreSQL Database (本番環境用)
  postgres:
    image: postgres:15-alpine
    container_name: vercel-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vercel_db}
      POSTGRES_USER: ${POSTGRES_USER:-vercel_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vercel_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - vercel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vercel_user} -d ${POSTGRES_DB:-vercel_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache (本番環境用)
  redis:
    image: redis:7-alpine
    container_name: vercel-redis-prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - vercel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Backend API Service (本番環境用)
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend-prod
    container_name: vercel-backend-prod
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-vercel_db}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-vercel_user}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-vercel_password}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC -XX:+UseContainerSupport"
    networks:
      - vercel-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend (Next.js) - 本番環境用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: vercel-frontend-prod
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:8080
      API_BASE_URL: http://backend:8080
    networks:
      - vercel-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy (本番環境用)
  nginx:
    image: nginx:alpine
    container_name: vercel-nginx-prod
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - vercel-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  vercel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
